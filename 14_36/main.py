import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest
from text_analyzer import extract_important_words, extract_text_from_url
from keyboards import get_language_inline_keyboard, get_main_menu_inline_keyboard, get_finish_inline_keyboard
from utils import translate_word
from database import init_db, add_user, save_quiz_result, get_user_stats

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = "7644901235:AAHOf3wmULThC2iVkBy2fMyUgsehPTlSCgg"
bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_state = {}
ADMIN_ID = 123456  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID


@dp.message(CommandStart())
async def handle_start(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    add_user(chat_id, username)
    await message.answer(
        "üëã *–í—ñ—Ç–∞—é\\!* –Ø Quizzy Cards ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –≤–∏–≤—á–µ–Ω–Ω—ñ –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤\\.\n"
        "–û–±–µ—Ä–∏ –º–æ–≤—É —Ç–µ–∫—Å—Ç—É:",
        reply_markup=get_language_inline_keyboard(),
        parse_mode="MarkdownV2"
    )
    user_state[chat_id] = {"stage": "choose_language"}


@dp.message(Command("stats"))
async def handle_stats(message: types.Message):
    chat_id = message.chat.id
    total_words, correct_answers = get_user_stats(chat_id)
    await message.answer(
        f"*–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"–í–∏–≤—á–µ–Ω–æ —Å–ª—ñ–≤: *{total_words}*\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: *{correct_answers}*",
        parse_mode="MarkdownV2"
    )


@dp.message(Command("viewdata"))
async def handle_viewdata(message: types.Message):
    chat_id = message.chat.id
    if chat_id != ADMIN_ID:
        await message.answer("‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ\\!*", parse_mode="MarkdownV2")
        return
    conn = sqlite3.connect('quizzy_cards.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users")
    users = c.fetchall()
    user_text = "\\n".join([f"ID: *{u[0]}*, Username: *{u[1]}*, Created: *{u[2]}*" for u in users])
    c.execute("SELECT user_id, word, correct, timestamp FROM quiz_results")
    results = c.fetchall()
    result_text = "\\n".join([f"User ID: *{r[0]}*, Word: *{r[1]}*, Correct: *{r[2]}*, Time: *{r[3]}*" for r in results])
    await message.answer(
        f"*–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n{user_text or '–ü—É—Å—Ç–æ'}\n\n*–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–≤—ñ–∑–∞:*\n{result_text or '–ü—É—Å—Ç–æ'}",
        parse_mode="MarkdownV2"
    )
    conn.close()


@dp.callback_query()
async def handle_callback_query(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    data = callback.data
    current_text = callback.message.text

    # –í–∏–±—ñ—Ä –º–æ–≤–∏
    if data.startswith("lang:"):
        language = data.split(":")[1]
        user_state[chat_id] = {"stage": "main_menu", "language": language}
        new_text = "‚úÖ *–ú–æ–≤—É –≤–∏–±—Ä–∞–Ω–æ\\!* –©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?"
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_main_menu_inline_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest:
            await callback.answer()

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –ü–æ—á–∞—Ç–∏ –∫–≤—ñ–∑
    elif data == "start_quiz":
        user_state[chat_id]["stage"] = "waiting_for_text"
        new_text = "üìù *–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:*"
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest:
            await callback.answer()

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    elif data == "view_stats":
        total_words, correct_answers = get_user_stats(chat_id)
        new_text = (
            f"*–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"–í–∏–≤—á–µ–Ω–æ —Å–ª—ñ–≤: *{total_words}*\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: *{correct_answers}*\n\n"
            "–©–æ –¥–∞–ª—ñ?"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_main_menu_inline_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
        except TelegramBadRequest:
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞!")

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É
    elif data == "change_language":
        user_state[chat_id]["stage"] = "choose_language"
        new_text = "üåê *–û–±–µ—Ä–∏ –º–æ–≤—É —Ç–µ–∫—Å—Ç—É:*"
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_language_inline_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest:
            await callback.answer()

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    elif data == "main_menu":
        user_state[chat_id]["stage"] = "main_menu"
        new_text = "üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\\!* –©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?"
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_main_menu_inline_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest:
            await callback.answer()

    # –ü—ñ—Å–ª—è –∫–≤—ñ–∑–∞: –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∫–≤—ñ–∑
    elif data == "repeat_quiz":
        state = user_state.get(chat_id, {})
        if state.get("stage") == "finished" and "words" in state:
            state["stage"] = "quiz"
            state["current_word_index"] = 0
            state["attempts"] = 3
            state["score"] = 0
            new_text = "üîÑ *–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–Ω–æ–≤–æ\\!*"
            try:
                if current_text != new_text:
                    await callback.message.edit_text(
                        new_text,
                        parse_mode="MarkdownV2"
                    )
                await send_next_word(chat_id)
            except TelegramBadRequest:
                await send_next_word(chat_id)
        else:
            new_text = "‚ùå *–ù–µ–º–∞—î –∫–≤—ñ–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É\\!* –ü–æ–≤–µ—Ä–Ω–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\\."
            try:
                if current_text != new_text:
                    await callback.message.edit_text(
                        new_text,
                        reply_markup=get_main_menu_inline_keyboard(),
                        parse_mode="MarkdownV2"
                    )
                await callback.answer()
            except TelegramBadRequest:
                await callback.answer()
        await callback.answer()

    # –ü—ñ—Å–ª—è –∫–≤—ñ–∑–∞: –ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç
    elif data == "new_text":
        user_state[chat_id]["stage"] = "waiting_for_text"
        new_text = "üìù *–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:*"
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest:
            await callback.answer()


@dp.message()
async def handle_message(message: types.Message):
    chat_id = message.chat.id
    text = message.text

    if user_state.get(chat_id, {}).get("stage") == "waiting_for_text":
        if text.startswith("http://") or text.startswith("https://"):
            article_text = extract_text_from_url(text)
            if not article_text:
                await message.answer(
                    "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç —ñ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\\.* –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\\!",
                    parse_mode="MarkdownV2",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                return
            words = extract_important_words(article_text)
        else:
            words = extract_important_words(text)

        if words:
            if isinstance(words, dict):
                words = words[0]
            await message.answer(
                f"‚ú® *–Ø –∑–Ω–∞–π—à–æ–≤ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:* _{', '.join(words)}_\\.\n"
                f"–ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏ –∫–≤—ñ–∑? üöÄ",
                parse_mode="MarkdownV2"
            )
            if len(words) < 5:
                await message.answer(
                    "‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Å–ª—ñ–≤\\. –ú–æ–∂–ª–∏–≤–æ, —Ç–µ–∫—Å—Ç –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π\\. –£—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ\\!",
                    parse_mode="MarkdownV2"
                )
            user_state[chat_id] = {
                "stage": "quiz",
                "words": words,
                "current_word_index": 0,
                "attempts": 3,
                "score": 0,
                "total_words": len(words),
                "language": user_state.get(chat_id, {}).get("language", "en")
            }
            await send_next_word(chat_id)
        else:
            await message.answer(
                "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ —Å–ª–æ–≤–∞\\.* –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç\\!",
                parse_mode="MarkdownV2",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )

    elif user_state.get(chat_id, {}).get("stage") == "quiz":
        await check_answer(chat_id, text)


async def send_next_word(chat_id):
    state = user_state[chat_id]
    if state["current_word_index"] < len(state["words"]):
        word = state["words"][state["current_word_index"]]
        translation = translate_word(word)
        state["current_translation"] = translation
        progress = f"*–°–ª–æ–≤–æ {state['current_word_index'] + 1}/{state['total_words']}*"
        await bot.send_message(
            chat_id,
            f"{progress}\n–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ _*{word}*_ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é:\n–°–ø—Ä–æ–±–∏: *{state['attempts']}*",
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        await finish_quiz(chat_id)


async def check_answer(chat_id, user_answer):
    state = user_state[chat_id]
    word = state["words"][state["current_word_index"]]
    correct_translation = state["current_translation"]

    logging.info(f"Checking answer: user_id={chat_id}, word={word}, answer={user_answer}, correct={correct_translation}")

    if user_answer.lower() == correct_translation:
        state["score"] += 1
        state["current_word_index"] += 1
        state["attempts"] = 3
        save_quiz_result(chat_id, word, 1)
        await bot.send_message(
            chat_id,
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ\\!* –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞\\! üéâ",
            parse_mode="MarkdownV2"
        )
        await send_next_word(chat_id)
    else:
        state["attempts"] -= 1
        if state["attempts"] > 0:
            await bot.send_message(
                chat_id,
                f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\\.* –°–ø—Ä–æ–±–∏: *{state['attempts']}*\\. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\\!",
                parse_mode="MarkdownV2",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            state["current_word_index"] += 1
            state["attempts"] = 3
            save_quiz_result(chat_id, word, 0)
            await bot.send_message(
                chat_id,
                f"‚è≥ *–°–ø—Ä–æ–±–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å\\!* –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥: _*{correct_translation}*_\\.\n"
                "–ô–¥–µ–º–æ –¥–∞–ª—ñ\\!",
                parse_mode="MarkdownV2"
            )
            await send_next_word(chat_id)


async def finish_quiz(chat_id):
    state = user_state[chat_id]
    score = state["score"]
    total = state["total_words"]
    await bot.send_message(
        chat_id,
        f"üèÅ *–ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\\!*\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{score}/{total}* üéâ\n"
        "–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
        reply_markup=get_finish_inline_keyboard(),
        parse_mode="MarkdownV2"
    )
    state["stage"] = "finished"


async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())