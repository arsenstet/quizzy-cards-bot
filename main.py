import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest
from flask import Flask, request
from text_analyzer import extract_important_words, extract_text_from_url
from keyboards import get_language_inline_keyboard, get_main_menu_inline_keyboard, get_finish_inline_keyboard, get_back_and_main_menu_keyboard
from utils import translate_word
from database import init_db, add_user, save_quiz_result, get_user_stats, view_all_data
from dotenv import load_dotenv
from langdetect import detect
import wikipediaapi

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables")
bot = Bot(token=TOKEN)
dp = Dispatcher()
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_state = {}
ADMIN_ID = 123456  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–∏–π
IS_LOCAL = os.getenv("IS_LOCAL", "true").lower() == "true"

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ü–∏–∫–ª –ø–æ–¥—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤ —É Flask
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Wikipedia API
wiki_wiki = wikipediaapi.Wikipedia('en')  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –í—ñ–∫—ñ–ø–µ–¥—ñ—é

@dp.message(CommandStart())
async def handle_start(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    add_user(chat_id, username)
    await message.answer(
        "üëã *–í—ñ—Ç–∞—é\\!* –Ø *Quizzy Cards* ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –≤–∏–≤—á–µ–Ω–Ω—ñ –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤\\.\n"
        "üìö –ù–∞–¥—Å–∏–ª–∞–π —Ç–µ–∫—Å—Ç –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∞ —è —Å—Ç–≤–æ—Ä—é –∫–≤—ñ–∑ —ñ–∑ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\\.\n"
        "üìä –ü–µ—Ä–µ–≥–ª—è–¥–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ—ó—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\\!\n\n"
        "*–û–±–µ—Ä–∏ –º–æ–≤—É, —â–æ–± –ø–æ—á–∞—Ç–∏:*",
        parse_mode="MarkdownV2"
    )
    await message.answer(
        "üìç *–í–∏–±—ñ—Ä –º–æ–≤–∏*\n"
        "–û–±–µ—Ä–∏ –º–æ–≤—É —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–≤—ñ–∑–∞\\.",
        reply_markup=get_language_inline_keyboard(),
        parse_mode="MarkdownV2"
    )
    user_state[chat_id] = {"stage": "choose_language"}


@dp.message(Command("stats"))
async def handle_stats(message: types.Message):
    chat_id = message.chat.id
    total_words, correct_answers = get_user_stats(chat_id)
    await message.answer(
        f"üìç *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
        f"*–¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å:*\n"
        f"‚Ä¢ –í–∏–≤—á–µ–Ω–æ —Å–ª—ñ–≤: *{total_words}*\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: *{correct_answers}*",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode="MarkdownV2"
    )


@dp.message(Command("viewdata"))
async def handle_viewdata(message: types.Message):
    chat_id = message.chat.id
    if chat_id != ADMIN_ID:
        await message.answer("‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ\\!*", parse_mode="MarkdownV2")
        return
    users, results = view_all_data()
    user_text = "\\n".join([f"ID: *{u[0]}*, Username: *{u[1]}*, Created: *{u[2]}*" for u in users])
    result_text = "\\n".join([f"User ID: *{r[0]}*, Word: *{r[1]}*, Correct: *{r[2]}*, Time: *{r[3]}*" for r in results])
    await message.answer(
        f"*–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n{user_text or '–ü—É—Å—Ç–æ'}\n\n*–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–≤—ñ–∑–∞:*\n{result_text or '–ü—É—Å—Ç–æ'}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode="MarkdownV2"
    )


@dp.callback_query()
async def handle_callback_query(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    data = callback.data
    current_text = callback.message.text
    logging.info(f"Callback received: chat_id={chat_id}, data={data}")

    if data.startswith("lang:"):
        language = data.split(":")[1]
        user_state[chat_id] = {"stage": "main_menu", "language": language}
        new_text = (
            "üìç *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*\n"
            "‚úÖ *–ú–æ–≤—É –≤–∏–±—Ä–∞–Ω–æ\\!*\n"
            "‚Ä¢ üìù *–ü–æ—á–∞—Ç–∏ –∫–≤—ñ–∑* ‚Äî —Å—Ç–≤–æ—Ä—é–π –∫–∞—Ä—Ç–∫–∏ –∑—ñ —Å–ª—ñ–≤\n"
            "‚Ä¢ üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* ‚Äî —Ç–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å\n"
            "‚Ä¢ üåê *–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É* ‚Äî –≤–∏–±–µ—Ä–∏ —ñ–Ω—à—É –º–æ–≤—É\n"
            "‚Ä¢ ‚ÑπÔ∏è *–î–æ–≤—ñ–¥–∫–∞* ‚Äî —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_main_menu_inline_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest as e:
            logging.error(f"Failed to edit message: {e}")
            await callback.answer()

    elif data == "start_quiz":
        user_state[chat_id]["stage"] = "waiting_for_text"
        new_text = (
            "üìç *–í–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É*\n"
            "üìù *–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:*\n"
            "‚Ä¢ –ê–±–æ –æ–±–µ—Ä–∏ *–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç* –¥–ª—è –∫–≤—ñ–∑–∞ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Å—Ç–∞—Ç—Ç—ñ"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_back_and_main_menu_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest as e:
            logging.error(f"Failed to edit message: {e}")
            await callback.answer()

    elif data == "view_stats":
        total_words, correct_answers = get_user_stats(chat_id)
        new_text = (
            "üìç *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            f"*–¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å:*\n"
            f"‚Ä¢ –í–∏–≤—á–µ–Ω–æ —Å–ª—ñ–≤: *{total_words}*\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: *{correct_answers}*"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode="MarkdownV2"
                )
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
        except TelegramBadRequest as e:
            logging.error(f"Failed to edit message: {e}")
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞!")

    elif data == "change_language":
        user_state[chat_id]["stage"] = "choose_language"
        new_text = (
            "üìç *–í–∏–±—ñ—Ä –º–æ–≤–∏*\n"
            "üåê *–û–±–µ—Ä–∏ –º–æ–≤—É —Ç–µ–∫—Å—Ç—É:*"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_language_inline_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest as e:
            logging.error(f"Failed to edit message: {e}")
            await callback.answer()

    elif data == "main_menu":
        user_state[chat_id]["stage"] = "main_menu"
        new_text = (
            "üìç *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é*\n"
            "üè† *–í–∏–±–µ—Ä–∏ –¥—ñ—é:*\n"
            "‚Ä¢ üìù *–ü–æ—á–∞—Ç–∏ –∫–≤—ñ–∑* ‚Äî —Å—Ç–≤–æ—Ä—é–π –∫–∞—Ä—Ç–∫–∏ –∑—ñ —Å–ª—ñ–≤\n"
            "‚Ä¢ üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* ‚Äî —Ç–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å\n"
            "‚Ä¢ üåê *–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É* ‚Äî –≤–∏–±–µ—Ä–∏ —ñ–Ω—à—É –º–æ–≤—É\n"
            "‚Ä¢ ‚ÑπÔ∏è *–î–æ–≤—ñ–¥–∫–∞* ‚Äî —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_main_menu_inline_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest as e:
            logging.error(f"Failed to edit message: {e}")
            await callback.answer()

    elif data == "show_help":
        new_text = (
            "üìç *–î–æ–≤—ñ–¥–∫–∞*\n\n"
            "üëã *Quizzy Cards* ‚Äî —Ü–µ –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤\\!\n"
            "üìö –Ø —Å—Ç–≤–æ—Ä—é—é –∫–≤—ñ–∑–∏ –∑ —Ç–µ–∫—Å—Ç—ñ–≤ –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω—å, –¥–æ–ø–æ–º–∞–≥–∞—é—á–∏ —Ç–æ–±—ñ –∑–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–∞ —ó—Ö –ø–µ—Ä–µ–∫–ª–∞–¥–∏\\.\n\n"
            "*–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:*\n"
            "‚Ä¢ üìù *–ü–æ—á–∞—Ç–∏ –∫–≤—ñ–∑* ‚Äî –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –æ–±–µ—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–≤—ñ–∑–∞\\.\n"
            "‚Ä¢ üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥–∞–π —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å\\.\n"
            "‚Ä¢ üåê *–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É* ‚Äî –æ–±–µ—Ä–∏ –º–æ–≤—É —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–≤—ñ–∑–∞\\.\n\n"
            "*–ö–æ–º–∞–Ω–¥–∏:*\n"
            "‚Ä¢ /start ‚Äî –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
            "‚Ä¢ /stats ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ /viewdata ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ \\(—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\)\n\n"
            "‚ú® –ù–∞–¥—Å–∏–ª–∞–π —Ç–µ–∫—Å—Ç –∞–±–æ –æ–±–∏—Ä–∞–π –æ–ø—Ü—ñ—ó —É –º–µ–Ω—é, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏\\!"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest as e:
            logging.error(f"Failed to edit message: {e}")
            await callback.answer()

    elif data == "random_text":
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Å—Ç–∞—Ç—Ç—é –∑ –í—ñ–∫—ñ–ø–µ–¥—ñ—ó
            random_page = wiki_wiki.random(pages=1)[0]
            page = wiki_wiki.page(random_page)
            article_text = page.text
            if not article_text or len(article_text) < 100:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–¥–∞—Ç–Ω–∏–π
                await callback.message.answer(
                    "üìç *–ü–æ–º–∏–ª–∫–∞*\n"
                    "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–¥–∞—Ç–Ω–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç\\. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\\.*",
                    reply_markup=get_back_and_main_menu_keyboard(),
                    parse_mode="MarkdownV2"
                )
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–≤–∏ (–ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞)
            detected_language = detect(article_text)
            if detected_language != "en":
                await callback.message.answer(
                    "üìç *–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è*\n"
                    "‚ö†Ô∏è *–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é\\. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\\.*",
                    reply_markup=get_back_and_main_menu_keyboard(),
                    parse_mode="MarkdownV2"
                )
                return

            # –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
            words = extract_important_words(article_text)
            if words:
                if isinstance(words, dict):
                    words = words[0]
                await callback.message.answer(
                    f"üìç *–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–≤—ñ–∑–∞*\n"
                    f"‚ú® *–Ø –∑–Ω–∞–π—à–æ–≤ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Å—Ç–∞—Ç—Ç—ñ \"{page.title}\":* _{', '.join(words)}_\\.\n"
                    f"–ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏ –∫–≤—ñ–∑? üöÄ",
                    parse_mode="MarkdownV2"
                )
                if len(words) < 5:
                    await callback.message.answer(
                        f"üìç *–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è*\n"
                        "‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Å–ª—ñ–≤\\. –ú–æ–∂–ª–∏–≤–æ, —Ç–µ–∫—Å—Ç –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π\\.\n"
                        "–£—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ\\!",
                        parse_mode="MarkdownV2"
                    )
                user_state[chat_id] = {
                    "stage": "quiz",
                    "words": words,
                    "current_word_index": 0,
                    "attempts": 3,
                    "score": 0,
                    "total_words": len(words),
                    "language": user_state.get(chat_id, {}).get("language", "en")
                }
                await send_next_word(chat_id)
            else:
                await callback.message.answer(
                    "üìç *–ü–æ–º–∏–ª–∫–∞*\n"
                    "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ —Å–ª–æ–≤–∞ —É –≤–∏–ø–∞–¥–∫–æ–≤–æ–º—É —Ç–µ–∫—Å—Ç—ñ\\. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\\.*",
                    reply_markup=get_back_and_main_menu_keyboard(),
                    parse_mode="MarkdownV2"
                )
        except Exception as e:
            logging.error(f"Error fetching random text: {e}")
            await callback.message.answer(
                "üìç *–ü–æ–º–∏–ª–∫–∞*\n"
                "‚ùå *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É\\. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\\.*",
                reply_markup=get_back_and_main_menu_keyboard(),
                parse_mode="MarkdownV2"
            )
        await callback.answer()

    elif data == "repeat_quiz":
        state = user_state.get(chat_id, {})
        if state.get("stage") == "finished" and "words" in state:
            state["stage"] = "quiz"
            state["current_word_index"] = 0
            state["attempts"] = 3
            state["score"] = 0
            new_text = (
                "üìç *–ö–≤—ñ–∑*\n"
                "üîÑ *–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–Ω–æ–≤–æ\\!*"
            )
            try:
                if current_text != new_text:
                    await callback.message.edit_text(
                        new_text,
                        parse_mode="MarkdownV2"
                    )
                await send_next_word(chat_id)
            except TelegramBadRequest as e:
                logging.error(f"Failed to edit message: {e}")
                await send_next_word(chat_id)
        else:
            new_text = (
                "üìç *–ü–æ–º–∏–ª–∫–∞*\n"
                "‚ùå *–ù–µ–º–∞—î –∫–≤—ñ–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É\\!*"
            )
            try:
                if current_text != new_text:
                    await callback.message.edit_text(
                        new_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
                        ]),
                        parse_mode="MarkdownV2"
                    )
                await callback.answer()
            except TelegramBadRequest as e:
                logging.error(f"Failed to edit message: {e}")
                await callback.answer()
        await callback.answer()

    elif data == "new_text":
        user_state[chat_id]["stage"] = "waiting_for_text"
        new_text = (
            "üìç *–í–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É*\n"
            "üìù *–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:*\n"
            "‚Ä¢ –ê–±–æ –æ–±–µ—Ä–∏ *–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç* –¥–ª—è –∫–≤—ñ–∑–∞ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Å—Ç–∞—Ç—Ç—ñ"
        )
        try:
            if current_text != new_text:
                await callback.message.edit_text(
                    new_text,
                    reply_markup=get_back_and_main_menu_keyboard(),
                    parse_mode="MarkdownV2"
                )
            await callback.answer()
        except TelegramBadRequest as e:
            logging.error(f"Failed to edit message: {e}")
            await callback.answer()


@dp.message()
async def handle_message(message: types.Message):
    chat_id = message.chat.id
    text = message.text

    if user_state.get(chat_id, {}).get("stage") == "waiting_for_text":
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —ñ –≤–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
        if text.startswith("http://") or text.startswith("https://"):
            article_text = extract_text_from_url(text)
            if not article_text:
                await message.answer(
                    "üìç *–í–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É*\n"
                    "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç —ñ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\\.*",
                    parse_mode="MarkdownV2",
                    reply_markup=get_back_and_main_menu_keyboard()
                )
                return
            text_to_analyze = article_text
        else:
            text_to_analyze = text

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–≤–∏ —Ç–µ–∫—Å—Ç—É
        chosen_language = user_state.get(chat_id, {}).get("language", "en")
        try:
            detected_language = detect(text_to_analyze)
            logging.info(f"Detected language: {detected_language}, Chosen language: {chosen_language}")
            if detected_language != chosen_language:
                await message.answer(
                    f"üìç *–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è*\n"
                    f"‚ö†Ô∏è *–í–∏–±—Ä–∞–Ω–∞ –º–æ–≤–∞ ‚Äî {chosen_language.upper()}, –∞–ª–µ —Ç–µ–∫—Å—Ç –∑–¥–∞—î—Ç—å—Å—è –Ω–∞–ø–∏—Å–∞–Ω–∏–º –º–æ–≤–æ—é {detected_language.upper()}\\.*\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –º–æ–≤–æ—é\\.",
                    parse_mode="MarkdownV2",
                    reply_markup=get_back_and_main_menu_keyboard()
                )
                return
        except Exception as e:
            logging.error(f"Language detection failed: {e}")
            await message.answer(
                "üìç *–ü–æ–º–∏–ª–∫–∞*\n"
                "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–≤—É —Ç–µ–∫—Å—Ç—É\\.*\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑\\.",
                parse_mode="MarkdownV2",
                reply_markup=get_back_and_main_menu_keyboard()
            )
            return

        # –Ø–∫—â–æ –º–æ–≤–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É
        words = extract_important_words(text_to_analyze)

        if words:
            if isinstance(words, dict):
                words = words[0]
            await message.answer(
                f"üìç *–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–≤—ñ–∑–∞*\n"
                f"‚ú® *–Ø –∑–Ω–∞–π—à–æ–≤ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:* _{', '.join(words)}_\\.\n"
                f"–ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏ –∫–≤—ñ–∑? üöÄ",
                parse_mode="MarkdownV2"
            )
            if len(words) < 5:
                await message.answer(
                    f"üìç *–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è*\n"
                    "‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Å–ª—ñ–≤\\. –ú–æ–∂–ª–∏–≤–æ, —Ç–µ–∫—Å—Ç –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π\\.\n"
                    "–£—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ\\!",
                    parse_mode="MarkdownV2"
                )
            user_state[chat_id] = {
                "stage": "quiz",
                "words": words,
                "current_word_index": 0,
                "attempts": 3,
                "score": 0,
                "total_words": len(words),
                "language": user_state.get(chat_id, {}).get("language", "en")
            }
            await send_next_word(chat_id)
        else:
            await message.answer(
                "üìç *–í–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É*\n"
                "‚ùå *–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ —Å–ª–æ–≤–∞\\.*",
                parse_mode="MarkdownV2",
                reply_markup=get_back_and_main_menu_keyboard()
            )

    elif user_state.get(chat_id, {}).get("stage") == "quiz":
        await check_answer(chat_id, text)


async def send_next_word(chat_id):
    state = user_state[chat_id]
    if state["current_word_index"] < len(state["words"]):
        word = state["words"][state["current_word_index"]]
        translation = translate_word(word)
        state["current_translation"] = translation
        progress = f"*–°–ª–æ–≤–æ {state['current_word_index'] + 1}/{state['total_words']}*"
        await bot.send_message(
            chat_id,
            f"üìç *–ö–≤—ñ–∑*\n"
            f"{progress}\n"
            f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ _*{word}*_ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é:\n"
            f"–°–ø—Ä–æ–±–∏: *{state['attempts']}*",
            parse_mode="MarkdownV2",
            reply_markup=get_back_and_main_menu_keyboard()
        )
    else:
        await finish_quiz(chat_id)


async def check_answer(chat_id, user_answer):
    state = user_state[chat_id]
    word = state["words"][state["current_word_index"]]
    correct_translation = state["current_translation"]

    logging.info(f"Checking answer: user_id={chat_id}, word={word}, answer={user_answer}, correct={correct_translation}")

    if user_answer.lower() == correct_translation:
        state["score"] += 1
        state["current_word_index"] += 1
        state["attempts"] = 3
        save_quiz_result(chat_id, word, True)
        await bot.send_message(
            chat_id,
            f"üìç *–ö–≤—ñ–∑*\n"
            f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ\\!* üéâ\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞\\!",
            parse_mode="MarkdownV2"
        )
        await send_next_word(chat_id)
    else:
        state["attempts"] -= 1
        if state["attempts"] > 0:
            progress = f"*–°–ª–æ–≤–æ {state['current_word_index'] + 1}/{state['total_words']}*"
            await bot.send_message(
                chat_id,
                f"üìç *–ö–≤—ñ–∑*\n"
                f"{progress}\n"
                f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\\.*\n"
                f"–°–ø—Ä–æ–±–∏: *{state['attempts']}*",
                parse_mode="MarkdownV2",
                reply_markup=get_back_and_main_menu_keyboard()
            )
        else:
            state["current_word_index"] += 1
            state["attempts"] = 3
            save_quiz_result(chat_id, word, False)
            await bot.send_message(
                chat_id,
                f"üìç *–ö–≤—ñ–∑*\n"
                f"‚è≥ *–°–ø—Ä–æ–±–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å\\!*\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥: _*{correct_translation}*_\\.",
                parse_mode="MarkdownV2"
            )
            await send_next_word(chat_id)


async def finish_quiz(chat_id):
    state = user_state[chat_id]
    score = state["score"]
    total = state["total_words"]
    total_words, correct_answers = get_user_stats(chat_id)
    await bot.send_message(
        chat_id,
        f"üìç *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤—ñ–∑–∞*\n"
        f"üèÅ *–ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\\!*\n"
        f"–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{score}/{total}*\n"
        f"–í–∏–≤—á–µ–Ω–æ —Å–ª—ñ–≤: *{total_words}*\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: *{correct_answers}*",
        reply_markup=get_finish_inline_keyboard(),
        parse_mode="MarkdownV2"
    )
    state["stage"] = "finished"


@app.route('/webhook', methods=['POST'])
def webhook():
    logging.info("Received webhook request")
    try:
        update = types.Update(**request.get_json())
        loop.run_until_complete(dp.feed_update(bot, update))
        logging.info("Webhook processed successfully")
        return '', 200
    except Exception as e:
        logging.error(f"Error processing webhook: {e}")
        return '', 500


@app.route('/webhook/setwebhook', methods=['GET'])
def set_webhook_endpoint():
    try:
        webhook_url = os.getenv("WEBHOOK_URL")
        if not webhook_url:
            logging.error("WEBHOOK_URL is not set in environment variables")
            return "WEBHOOK_URL is not set in environment variables", 500
        loop.run_until_complete(bot.set_webhook(webhook_url))
        logging.info(f"Webhook set to {webhook_url}")
        return {"ok": True, "result": True, "description": "Webhook was set"}, 200
    except Exception as e:
        logging.error(f"Failed to set webhook: {e}")
        return {"ok": False, "description": f"Failed to set webhook: {str(e)}"}, 500


async def set_webhook():
    webhook_url = os.getenv("WEBHOOK_URL")
    if not webhook_url:
        raise ValueError("WEBHOOK_URL is not set in environment variables")
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook set to {webhook_url}")


async def main():
    logging.info("Starting database initialization...")
    init_db()
    logging.info("Database initialization completed.")

    if IS_LOCAL:
        logging.info("Running in local mode with polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook deleted, starting polling...")
        await dp.start_polling(bot)
    else:
        logging.info("Running in production mode with webhook...")
        await set_webhook()


if __name__ == "__main__":
    asyncio.run(main())